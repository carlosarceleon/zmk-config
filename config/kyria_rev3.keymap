/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};
 */

/ {
    macros {
        left_desktop: left_desktop {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>;
            label = "LEFT_DESKTOP";
        };
    };

    combos {
        compatible = "zmk,combos";

        Esc {
            bindings = <&kp ESCAPE>;
            key-positions = <16 19>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alphabet {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | LAYER 1 | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
            //                     | GUI  | DEL  | RET  |  SPACE  |   ESC   |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |

            bindings = <
&kp ESC               &kp Q  &kp W  &kp E       &kp R     &kp T                                                                          &kp Y      &kp U      &kp I      &kp O    &kp P     &kp BACKSPACE
&kp LEFT_SHIFT        &kp A  &kp S  &kp D       &kp F     &kp G                                                                          &kp H      &kp J      &kp K      &kp L    &kp SEMI  &kp SQT
&mt LEFT_CONTROL TAB  &kp Z  &kp X  &kp C       &kp V     &kp B      &kp LEFT_BRACKET  &kp LC(LA(LEFT_ARROW))  &mo 3  &kp RIGHT_BRACKET  &kp N      &kp M      &kp COMMA  &kp DOT  &kp FSLH  &kp RCTRL
                                    &kp ESCAPE  &kp LWIN  &kp SPACE  &kp LEFT_ALT      &mo 1                   &mo 2  &kp ENTER          &kp SPACE  &kp TILDE  &mo 3
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        function_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |       |      |BT_CLR|BTSEL0|BTSEL1|BTSEL2|                                         |      |      |      |      |      |      |
            // |       |      |      |BTSEL3|BTSEL4|      |                                         |      |      |      |      |      |      |
            // |       |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |
            //                       |      |      |      |      |      |      |      |      |      |      |      |      |

            bindings = <
&none           &kp LC(LG(LEFT))  &none  &none  &none  &kp LG(LC(RIGHT))                                &kp PAGE_UP    &kp HOME        &kp UP_ARROW  &kp END     &kp C_VOLUME_UP  &kp DELETE
&kp LEFT_SHIFT  &none             &none  &none  &none  &none                                            &kp PAGE_DOWN  &kp LEFT        &kp DOWN      &kp RIGHT   &kp C_VOL_DN     &kp INSERT
&kp LCTRL       &none             &none  &none  &none  &none              &none  &none   &none   &none  &kp C_PAUSE    &kp C_PREVIOUS  &kp C_PLAY    &kp C_NEXT  &kp C_MUTE       &kp PRINTSCREEN
                                         &none  &none  &none              &none  &trans  &trans  &none  &none          &none           &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        layer_2 {
            bindings = <
&kp LS(TILDE)  &kp N1        &kp N2         &kp N3         &kp N4        &kp N5                                                     &kp N6         &kp N7         &kp N8        &kp N9        &kp N0        &kp EQUAL
&kp LS(TILDE)  &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)                                              &kp LS(CARET)  &kp LS(AMPS)   &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)  &kp LS(PLUS)
&kp LS(PIPE)   &kp BSLH      &kp LS(COLON)  &kp SEMI       &kp MINUS     &kp LBKT       &kp LS(LBRC)  &trans  &trans  &kp LS(RBRC)  &kp RBKT       &kp LS(UNDER)  &kp COMMA     &kp DOT       &kp FSLH      &kp LS(QMARK)
                                            &trans         &trans        &trans         &trans        &trans  &trans  &trans        &trans         &trans         &trans
            >;
        };

        fn_layer {
            bindings = <
&none  &kp F9  &kp F10  &kp F11  &kp F12  &none                                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none  &none  &bt BT_CLR
&none  &kp F5  &kp F6   &kp F7   &kp F8   &none                                &bt BT_SEL 3  &bt BT_SEL 4  &none         &none  &none  &none
&none  &kp F1  &kp F2   &kp F3   &kp F4   &none  &none  &none   &none   &none  &none         &none         &none         &none  &none  &none
                        &none    &none    &none  &none  &trans  &trans  &none  &none         &none         &trans
            >;
        };
    };
};
